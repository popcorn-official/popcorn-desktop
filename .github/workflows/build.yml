name: Latest Build

on:
  push:
    branches:
      - '*'
      - '!development_old_nwjs'

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: yarn version
        run: |
          yarn version

      - name: node version
        run: |
          node --version

      - name: Build App [macOS]
        if: matrix.os == 'macOS-latest'
        run: |
          yarn
          npm install --legacy-peer-deps
          yarn gulp dist

      - name: Build App [ubuntu]
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn
          npm install --legacy-peer-deps
          yarn gulp dist --platforms=linux32,linux64

      - name: Build App [windows]
        if: matrix.os == 'windows-latest'
        run: |
          yarn
          npm install --legacy-peer-deps
          yarn gulp dist --platforms=win32
          yarn gulp dist --platforms=win64
        env:
          NSIS_PATH: ${{ steps.prep_nsis.outputs.nsis-path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: build

  release:
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Context
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get the version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

      - uses: actions/download-artifact@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: ubuntu-latest

      - uses: actions/download-artifact@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: windows-latest

      - uses: actions/download-artifact@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: macOS-latest

      - run: find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset [macOS-zip]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macOS-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-osx64.zip
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-osx64.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [macOS-pkg]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macOS-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}.pkg
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}.pkg
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [ubuntu-deb-amd64]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-amd64.deb
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-amd64.deb
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [ubuntu-zip-x64]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-linux64.zip
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-linux64.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [ubuntu-deb-i386]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-i386.deb
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-i386.deb
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [ubuntu-zip-x32]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-linux32.zip
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-linux32.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [windows-zip-x64]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win64.zip
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win64.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [windows-zip-ia32]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win32.zip
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win32.zip
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [windows-setup-x64]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win64-Setup.exe
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win64-Setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset [windows-setup-ia32]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-latest/Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win32-Setup.exe
          asset_name: Popcorn-Time-${{ steps.get_version.outputs.VERSION }}-win32-Setup.exe
          asset_content_type: application/octet-stream
